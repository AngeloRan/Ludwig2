# must be off if run in  a container
# daemon off;
#error_log /dev/stdout info;
worker_processes auto; # if manual use only 2*core of the cpu

# user nobody nogroup;
pid /tmp/nginx.pid;

events {
        worker_connections  8096;
        multi_accept        on;
        use                 epoll;
}

http {
  ##
  # Buffer sizes
  ##
  fastcgi_buffers 8 64;
  fastcgi_buffer_size 64;

  client_max_body_size 16M;
  client_body_buffer_size 1M;

  client_header_buffer_size 5120k;
  large_client_header_buffers 16 5120k;

  ##
  # Logging Settings
  ##
  access_log /var/log/nginx/access.log;
  error_log  /var/log/nginx/error.log;
  #** console output ***
  #error_log /dev/stdout;
  #access_log /dev/stdout;
 
  # data limiter
  limit_req_zone  $binary_remote_addr  zone=one:10m   rate=1000r/s;

  ##
  # Gzip Settings
  ##

  gzip on;
  gzip_disable "msie6";
  gzip_vary on;
  gzip_proxied any;
  gzip_comp_level 6;
  gzip_min_length 2048;
  gzip_buffers 16 8k;
  gzip_http_version 1.1;
  gzip_types text/plain text/css application/json application/x-javascript text/xml application/xml application/xml+rss text/javascript;

  ##
  # Virtual Host Configs
  ##
  
  #include /etc/nginx/conf.d/*.conf;
 
  upstream app_server {
    # fail_timeout=0 means we always retry an upstream even if it failed
    # to return a good HTTP response

    # for UNIX domain socket setups
    #server unix:/home//gunicorn.sock fail_timeout=0;

    # for a TCP configuration

    server 0.0.0.0:3001 fail_timeout=0;

  }
 
  #
  server {
  include /etc/nginx/mime.types;
      listen 80;
      listen 443 ssl;  # <---- ssl 

  # set the correct host(s) for your site
      server_name SERVERNAME;
      ssl_certificate /certbot/live/SERVERNAME/fullchain.pem;
      ssl_certificate_key  /certbot/live/SERVERNAME/privkey.pem;


  # uncommnet to use SSL
      ssl_session_cache  builtin:1000  shared:SSL:10m;
      ssl_protocols TLSv1.3; #  TLSv1 TLSv1.1 TLSv1.2 
      ssl_ciphers HIGH:!aNULL:!eNULL:!EXPORT:!CAMELLIA:!DES:!MD5:!PSK:!RC4;
      ssl_prefer_server_ciphers on;

  keepalive_timeout 5;

      # force https-redirects
      if ($scheme = http) {
          return 301 https://$server_name$request_uri;
      }

  location ~* ^/static/(.+)$ {
        root /app/staticfiles;
        try_files /$1  # < --- first check
   @proxy_to_app; # < --- other files
  
        expires 2d;
  }


  location / {
    # checks for static file, if not found proxy to app
    try_files $uri @proxy_to_app;
  }

  location @proxy_to_app {
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        # enable this if and only if you use HTTPS
        proxy_set_header X-Forwarded-Proto https;
        proxy_set_header Host $http_host;
        # we don't want nginx trying to do something clever with
        # redirects, we set the Host: header above already.
      
        proxy_redirect http:// https://; # < --- https
        proxy_pass http://app_server;

        proxy_connect_timeout  60;
        proxy_send_timeout    60;
        proxy_read_timeout    60;
        send_timeout      60;

        limit_req zone=one burst=200 nodelay;
    }
  }
}
